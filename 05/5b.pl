#!/usr/bin/env perl

use strict;
use warnings;
use feature qw(say);
use Data::Dumper;

my $program = <DATA>;
chomp $program;

my $memory = [ split /,/, $program ];

run($memory);

sub run {
    my ($memory) = @_;

    my $i = 0;
    while ($i > -1) {
        $i = run_instruction($memory, $i);
    }

    return $memory->[0]
}

sub run_instruction {
    my ($memory, $i) = @_;
    my $ops = {
        1 => \&add,
        2 => \&mul,
	3 => \&input,
	4 => \&output,
	5 => \&jump_if_true,
	6 => \&jump_if_false,
	7 => \&less_than,
	8 => \&equals,
        99 => \&halt,
    };
    my $number_of_args_for = {
        1 => 2,
        2 => 2,
        3 => 0,
        4 => 1,
	5 => 2,
	6 => 2,
	7 => 2,
	8 => 2,
        99 => 0,
    };
    my $has_output = {
	1 => 1,
	2 => 1,
	3 => 1,
	4 => 0,
	5 => 0,
	6 => 0,
	7 => 1,
	8 => 1,
	99 => 0,
    };

    my $opcode = opcode($memory, $i);
    my $op = $ops->{$opcode};
    my $number_of_args = $number_of_args_for->{$opcode};
    my $args = args($memory, $i, $number_of_args);
    my $output_address;
    if ($has_output->{$opcode}) {
	$output_address = $memory->[$i + $number_of_args + 1];
    }
    say join(',', @{$memory}[$i .. $i + $number_of_args + $has_output->{$opcode}]);
    # say $memory->[$i], " ", $opcode, "(", join(',',@$args), ")";
    # if ($has_output->{$opcode}) {
    #     say "\t--> ", $output_address;
    # }
    return $op->($memory, $i, $args, $output_address)
}

sub opcode {
    my ($memory, $i) = @_;
    return $memory->[$i] % 100;
}

sub args {
    my ($memory, $i, $number_of_args) = @_;
    my $opcode = opcode($memory, $i);
    my $mode = ($memory->[$i] - $opcode) / 100;
    my @mode = reverse(split(//, $mode)) if $mode;
    my @args = @{$memory}[($i + 1) .. ($i + $number_of_args)];
    for my $j (0 .. $#args) {
	$args[$j] = $memory->[$args[$j]] if ! $mode[$j]
    }
    return [@args];
}

sub output_address {
    my ($memory, $i, $index_offset) = @_;
    return if ! $index_offset;
    return $memory->[$i + $index_offset]
}

sub add {
    my ($memory, $i, $args, $output_address) = @_;
    $memory->[$output_address] = $args->[0] + $args->[1];
    return $i + 4
}

sub mul {
    my ($memory, $i, $args, $output_address) = @_;
    $memory->[$output_address] = $args->[0] * $args->[1];
    return $i + 4
}

sub input {
    my ($memory, $i, undef, $output_address) = @_;
    my $in = <STDIN>;
    chomp $in;
    $memory->[$output_address] = $in;
    return $i + 2
}

sub output {
    my ($memory, $i, $args) = @_;
    say "OUT: " . $args->[0];
    return $i + 2
}

sub jump_if_true {
    my ($memory, $i, $args) = @_;
    return $args->[1] if $args->[0];
    return $i + 3
}

sub jump_if_false {
    my ($memory, $i, $args) = @_;
    return $args->[1] if ! $args->[0];
    return $i + 3
}

sub less_than {
    my ($memory, $i, $args, $output_address) = @_;
    $memory->[$output_address] = ($args->[0] < $args->[1]) ? 1 : 0;
    return $i + 4
}

sub equals {
    my ($memory, $i, $args, $output_address) = @_;
    $memory->[$output_address] = ($args->[0] == $args->[1]) ? 1 : 0;
    return $i + 4
}

sub halt {
    return -1
}


__DATA__
3,225,1,225,6,6,1100,1,238,225,104,0,1002,148,28,224,1001,224,-672,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1102,8,21,225,1102,13,10,225,1102,21,10,225,1102,6,14,225,1102,94,17,225,1,40,173,224,1001,224,-90,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,2,35,44,224,101,-80,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,26,94,224,101,-120,224,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1001,52,70,224,101,-87,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,16,92,225,1101,59,24,225,102,83,48,224,101,-1162,224,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,80,10,225,101,5,143,224,1001,224,-21,224,4,224,1002,223,8,223,1001,224,6,224,1,223,224,223,1102,94,67,224,101,-6298,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,677,677,224,102,2,223,223,1005,224,329,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,344,101,1,223,223,1107,226,226,224,102,2,223,223,1006,224,359,101,1,223,223,1108,677,677,224,102,2,223,223,1005,224,374,101,1,223,223,8,677,226,224,1002,223,2,223,1005,224,389,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,107,677,677,224,102,2,223,223,1006,224,419,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1005,224,449,1001,223,1,223,8,677,677,224,1002,223,2,223,1006,224,464,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,479,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,494,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,509,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,554,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,569,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,614,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,629,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226
